{"ast":null,"code":"var _jsxFileName = \"/home/omidiora/Desktop/React App image compressor/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport imageCompression from 'browser-image-compression';\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.compressImage = this.compressImage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1024,\n      webWorker: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null\n      }\n    };\n  }\n\n  handleChange(target) {\n    return e => {\n      this.setState({\n        [target]: e.currentTarget.value\n      });\n    };\n  }\n\n  onProgress(p, useWebWorker) {\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread';\n    this.setState(prevState => ({ ...prevState,\n      [targetName]: { ...prevState[targetName],\n        progress: p\n      }\n    }));\n  }\n\n  async compressImage(event, useWebWorker) {\n    const file = event.target.files[0];\n    console.log('input', file);\n    console.log('ExifOrientation', await imageCompression.getExifOrientation(file));\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread';\n    this.setState(prevState => ({ ...prevState,\n      [targetName]: { ...prevState[targetName],\n        inputSize: (file.size / 1024 / 1024).toFixed(2),\n        inputUrl: URL.createObjectURL(file)\n      }\n    }));\n    var options = {\n      maxSizeMB: this.state.maxSizeMB,\n      maxWidthOrHeight: this.state.maxWidthOrHeight,\n      useWebWorker,\n      onProgress: p => this.onProgress(p, useWebWorker)\n    };\n    const output = await imageCompression(file, options);\n    console.log('output', output);\n    this.setState(prevState => ({ ...prevState,\n      [targetName]: { ...prevState[targetName],\n        outputSize: (output.size / 1024 / 1024).toFixed(2),\n        outputUrl: URL.createObjectURL(output)\n      }\n    }));\n  }\n\n  render() {\n    const {\n      webWorker,\n      mainThread,\n      maxSizeMB,\n      maxWidthOrHeight\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Options:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"maxSizeMB\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, \"maxSizeMB: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"maxSizeMB\",\n      name: \"maxSizeMB\",\n      value: maxSizeMB,\n      onChange: this.handleChange('maxSizeMB'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 108\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"maxWidthOrHeight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, \"maxWidthOrHeight: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"maxWidthOrHeight\",\n      name: \"maxWidthOrHeight\",\n      value: maxWidthOrHeight,\n      onChange: this.handleChange('maxWidthOrHeight'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 63\n      }\n    })), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"web-worker\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \"Compress in web-worker\", ' ', webWorker.progress && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 36\n      }\n    }, webWorker.progress, \" %\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"web-worker\",\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: e => this.compressImage(e, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, webWorker.inputSize && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, \"Source image size: \", webWorker.inputSize, \" mb\"), webWorker.outputSize && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }, \", Output image size: \", webWorker.outputSize))));\n  }\n\n}\n;","map":{"version":3,"sources":["/home/omidiora/Desktop/React App image compressor/src/App.js"],"names":["React","imageCompression","App","Component","constructor","args","compressImage","bind","handleChange","state","maxSizeMB","maxWidthOrHeight","webWorker","progress","inputSize","outputSize","inputUrl","outputUrl","target","e","setState","currentTarget","value","onProgress","p","useWebWorker","targetName","prevState","event","file","files","console","log","getExifOrientation","size","toFixed","URL","createObjectURL","options","output","render","mainThread"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AAEA,eAAe,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAC/CC,EAAAA,WAAW,CAAE,GAAGC,IAAL,EAAW;AACpB,UAAM,GAAGA,IAAT;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,CADA;AAEXC,MAAAA,gBAAgB,EAAE,IAFP;AAGXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE,IADD;AAETC,QAAAA,SAAS,EAAE,IAFF;AAGTC,QAAAA,UAAU,EAAE,IAHH;AAITC,QAAAA,QAAQ,EAAE,IAJD;AAKTC,QAAAA,SAAS,EAAE;AALF;AAHA,KAAb;AAYD;;AAEDT,EAAAA,YAAY,CAAEU,MAAF,EAAU;AACpB,WAAQC,CAAD,IAAO;AACZ,WAAKC,QAAL,CAAc;AAAE,SAACF,MAAD,GAAUC,CAAC,CAACE,aAAF,CAAgBC;AAA5B,OAAd;AACD,KAFD;AAGD;;AAEDC,EAAAA,UAAU,CAAEC,CAAF,EAAKC,YAAL,EAAmB;AAC3B,UAAMC,UAAU,GAAGD,YAAY,GAAG,WAAH,GAAiB,YAAhD;AACA,SAAKL,QAAL,CAAcO,SAAS,KAAK,EAC1B,GAAGA,SADuB;AAE1B,OAACD,UAAD,GAAc,EACZ,GAAGC,SAAS,CAACD,UAAD,CADA;AAEZb,QAAAA,QAAQ,EAAEW;AAFE;AAFY,KAAL,CAAvB;AAOD;;AAEkB,QAAblB,aAAa,CAAEsB,KAAF,EAASH,YAAT,EAAuB;AACxC,UAAMI,IAAI,GAAGD,KAAK,CAACV,MAAN,CAAaY,KAAb,CAAmB,CAAnB,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,IAArB;AACAE,IAAAA,OAAO,CAACC,GAAR,CACE,iBADF,EAEE,MAAM/B,gBAAgB,CAACgC,kBAAjB,CAAoCJ,IAApC,CAFR;AAIA,UAAMH,UAAU,GAAGD,YAAY,GAAG,WAAH,GAAiB,YAAhD;AACA,SAAKL,QAAL,CAAcO,SAAS,KAAK,EAC1B,GAAGA,SADuB;AAE1B,OAACD,UAAD,GAAc,EACZ,GAAGC,SAAS,CAACD,UAAD,CADA;AAEZZ,QAAAA,SAAS,EAAE,CAACe,IAAI,CAACK,IAAL,GAAY,IAAZ,GAAmB,IAApB,EAA0BC,OAA1B,CAAkC,CAAlC,CAFC;AAGZnB,QAAAA,QAAQ,EAAEoB,GAAG,CAACC,eAAJ,CAAoBR,IAApB;AAHE;AAFY,KAAL,CAAvB;AAQA,QAAIS,OAAO,GAAG;AACZ5B,MAAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,SADV;AAEZC,MAAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWE,gBAFjB;AAGZc,MAAAA,YAHY;AAIZF,MAAAA,UAAU,EAAEC,CAAC,IAAI,KAAKD,UAAL,CAAgBC,CAAhB,EAAmBC,YAAnB;AAJL,KAAd;AAMA,UAAMc,MAAM,GAAG,MAAMtC,gBAAgB,CAAC4B,IAAD,EAAOS,OAAP,CAArC;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBO,MAAtB;AACA,SAAKnB,QAAL,CAAcO,SAAS,KAAK,EAC1B,GAAGA,SADuB;AAE1B,OAACD,UAAD,GAAc,EACZ,GAAGC,SAAS,CAACD,UAAD,CADA;AAEZX,QAAAA,UAAU,EAAE,CAACwB,MAAM,CAACL,IAAP,GAAc,IAAd,GAAqB,IAAtB,EAA4BC,OAA5B,CAAoC,CAApC,CAFA;AAGZlB,QAAAA,SAAS,EAAEmB,GAAG,CAACC,eAAJ,CAAoBE,MAApB;AAHC;AAFY,KAAL,CAAvB;AAQD;;AAEDC,EAAAA,MAAM,GAAI;AACR,UAAM;AAAE5B,MAAAA,SAAF;AAAa6B,MAAAA,UAAb;AAAyB/B,MAAAA,SAAzB;AAAoCC,MAAAA;AAApC,QAAyD,KAAKF,KAApE;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV,eAEE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAsC;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,EAAE,EAAC,WAAxB;AAAoC,MAAA,IAAI,EAAC,WAAzC;AACO,MAAA,KAAK,EAAEC,SADd;AAEO,MAAA,QAAQ,EAAE,KAAKF,YAAL,CAAkB,WAAlB,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtC,CAFF,eAImG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJnG,eAKE;AAAO,MAAA,OAAO,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAoD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,EAAE,EAAC,kBAAxB;AACO,MAAA,IAAI,EAAC,kBADZ;AAEO,MAAA,KAAK,EAAEG,gBAFd;AAGO,MAAA,QAAQ,EAAE,KAAKH,YAAL,CAAkB,kBAAlB,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApD,CALF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAUE;AAAO,MAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACyB,GADzB,EAEGI,SAAS,CAACC,QAAV,iBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,SAAS,CAACC,QAAjB,OAFzB,eAGE;AACE,MAAA,EAAE,EAAC,YADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,MAAM,EAAC,SAHT;AAIE,MAAA,QAAQ,EAAEM,CAAC,IAAI,KAAKb,aAAL,CAAmBa,CAAnB,EAAsB,IAAtB,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAVF,eAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,SAAS,CAACE,SAAV,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA0BF,SAAS,CAACE,SAApC,QAFJ,EAIGF,SAAS,CAACG,UAAV,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA4BH,SAAS,CAACG,UAAtC,CALJ,CApBF,CADF,CADF;AAqCD;;AA7G8C;AA8GhD","sourcesContent":["import React from 'react'\nimport './App.css'\nimport imageCompression from 'browser-image-compression'\n\nexport default class App extends React.Component {\n  constructor (...args) {\n    super(...args)\n    this.compressImage = this.compressImage.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1024,\n      webWorker: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null\n      },\n     \n    }\n  }\n\n  handleChange (target) {\n    return (e) => {\n      this.setState({ [target]: e.currentTarget.value })\n    }\n  }\n\n  onProgress (p, useWebWorker) {\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread'\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        progress: p\n      }\n    }))\n  }\n\n  async compressImage (event, useWebWorker) {\n    const file = event.target.files[0]\n    console.log('input', file)\n    console.log(\n      'ExifOrientation',\n      await imageCompression.getExifOrientation(file)\n    )\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread'\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        inputSize: (file.size / 1024 / 1024).toFixed(2),\n        inputUrl: URL.createObjectURL(file)\n      }\n    }))\n    var options = {\n      maxSizeMB: this.state.maxSizeMB,\n      maxWidthOrHeight: this.state.maxWidthOrHeight,\n      useWebWorker,\n      onProgress: p => this.onProgress(p, useWebWorker)\n    }\n    const output = await imageCompression(file, options)\n    console.log('output', output)\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        outputSize: (output.size / 1024 / 1024).toFixed(2),\n        outputUrl: URL.createObjectURL(output)\n      }\n    }))\n  }\n\n  render () {\n    const { webWorker, mainThread, maxSizeMB, maxWidthOrHeight } = this.state\n    return (\n      <div className=\"App\">\n        <div>\n          Options:<br />\n          <label htmlFor=\"maxSizeMB\">maxSizeMB: <input type=\"number\" id=\"maxSizeMB\" name=\"maxSizeMB\"\n                                                       value={maxSizeMB}\n                                                       onChange={this.handleChange('maxSizeMB')} /></label><br />\n          <label htmlFor=\"maxWidthOrHeight\">maxWidthOrHeight: <input type=\"number\" id=\"maxWidthOrHeight\"\n                                                                     name=\"maxWidthOrHeight\"\n                                                                     value={maxWidthOrHeight}\n                                                                     onChange={this.handleChange('maxWidthOrHeight')} /></label>\n          <hr />\n          <label htmlFor=\"web-worker\">\n            Compress in web-worker{' '}\n            {webWorker.progress && <span>{webWorker.progress} %</span>}\n            <input\n              id=\"web-worker\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={e => this.compressImage(e, true)}\n            />\n          </label>\n          <p>\n            {webWorker.inputSize && (\n              <span>Source image size: {webWorker.inputSize} mb</span>\n            )}\n            {webWorker.outputSize && (\n              <span>, Output image size: {webWorker.outputSize}</span>\n            )}\n          </p>\n        </div>\n        \n      \n      \n        \n      </div>\n    )\n  }\n};\n"]},"metadata":{},"sourceType":"module"}