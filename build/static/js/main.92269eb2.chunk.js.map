{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","args","compressImage","bind","handleChange","state","maxSizeMB","maxWidthOrHeight","webWorker","progress","inputSize","outputSize","inputUrl","outputUrl","mainThread","target","e","setState","currentTarget","value","p","useWebWorker","targetName","this","prevState","event","a","file","files","console","log","imageCompression","getExifOrientation","size","toFixed","URL","createObjectURL","options","onProgress","output","Container","Row","Col","md","span","offset","htmlFor","className","Form","id","type","accept","onChange","Group","File","label","Badge","variant","Alert","Card","Img","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sXAKqBA,E,kDACnB,aAAuB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACpB,+BAASA,KACJC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQ,CACXC,UAAW,EACXC,iBAAkB,KAClBC,UAAW,CACTC,SAAU,KACVC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,UAAW,MAEbC,WAAY,CACVL,SAAU,KACVC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,UAAW,OAnBK,E,gDAwBtB,SAAcE,GAAS,IAAD,OACpB,OAAO,SAACC,GACN,EAAKC,SAAL,eAAiBF,EAASC,EAAEE,cAAcC,W,wBAI9C,SAAYC,EAAGC,GACb,IAAMC,EAAaD,EAAe,YAAc,aAChDE,KAAKN,UAAS,SAAAO,GAAS,kCAClBA,GADkB,kBAEpBF,EAFoB,2BAGhBE,EAAUF,IAHM,IAInBb,SAAUW,W,kEAKhB,WAAqBK,EAAOJ,GAA5B,4BAAAK,EAAA,6DACQC,EAAOF,EAAMV,OAAOa,MAAM,GAChCC,QAAQC,IAAI,QAASH,GAFvB,KAGEE,QAHF,SAKUE,IAAiBC,mBAAmBL,GAL9C,+BAGUG,IAHV,UAII,kBAJJ,MAOQR,EAAaD,EAAe,YAAc,aAChDE,KAAKN,UAAS,SAAAO,GAAS,kCAClBA,GADkB,kBAEpBF,EAFoB,2BAGhBE,EAAUF,IAHM,IAInBZ,WAAYiB,EAAKM,KAAO,KAAO,MAAMC,QAAQ,GAC7CtB,SAAUuB,IAAIC,gBAAgBT,UAG9BU,EAAU,CACZ/B,UAAWiB,KAAKlB,MAAMC,UACtBC,iBAAkBgB,KAAKlB,MAAME,iBAC7Bc,eACAiB,WAAY,SAAAlB,GAAC,OAAI,EAAKkB,WAAWlB,EAAGC,KApBxC,UAsBuBU,YAAiBJ,EAAMU,GAtB9C,QAsBQE,EAtBR,OAuBEV,QAAQC,IAAI,SAAUS,GACtBhB,KAAKN,UAAS,SAAAO,GAAS,kCAClBA,GADkB,kBAEpBF,EAFoB,2BAGhBE,EAAUF,IAHM,IAInBX,YAAa4B,EAAON,KAAO,KAAO,MAAMC,QAAQ,GAChDrB,UAAWsB,IAAIC,gBAAgBG,UA7BrC,iD,6EAkCA,WAAW,IAAD,SACuDhB,KAAKlB,MAA5DG,EADA,EACAA,UAAWM,EADX,EACWA,WADX,EACuBR,UADvB,EACkCC,iBAC1C,OACE,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAE5B,6BAGE,2BAAOC,QAAQ,cAEf,uBAAGC,UAAU,eAAc,wBAAIA,UAAU,QAAd,yBAA3B,MACGvC,EAAUC,UAAY,8BAAOD,EAAUC,SAAjB,MAEvB,kBAACuC,EAAA,EAAD,CAAMC,GAAG,aACPC,KAAK,OACLC,OAAO,UACPC,SAAU,SAAApC,GAAC,OAAI,EAAKd,cAAcc,GAAG,KACvC,kBAACgC,EAAA,EAAKK,MAAN,SAAa,kBAACL,EAAA,EAAKM,KAAN,CAAWL,GAAG,0BAA0BM,MAAM,0BAM7D,2BACG/C,EAAUE,WACT,kCAAO,iDAAP,IAAiC,kBAAC8C,EAAA,EAAD,CAAOC,QAAQ,WAAW,GAAIjD,EAAUE,UAAxC,SAEnC,6BACA,6BACA,6BACA,6BACCF,EAAUG,YACT,8BAAM,mDAAN,IAAkC,kBAAC6C,EAAA,EAAD,CAAOC,QAAQ,WAAWjD,EAAUG,WAApC,OAAlC,QAKJG,EAAWF,UAAYJ,EAAUI,WACjC,+BACE,+BACA,4BACE,iCAAM,kBAAC8C,EAAA,EAAD,CAAQD,QAAS,WAAjB,mBACN,4BAAI,kBAACC,EAAA,EAAD,CAAQD,QAAS,UAAjB,sBAGN,+BACA,4BACA,gCAAK,kBAACE,EAAA,EAAKC,IAAN,CAAUH,QAAQ,SAASI,IAAK/C,EAAWF,UAAYJ,EAAUI,YACtE,gCAAK,kBAAC+C,EAAA,EAAKC,IAAN,CAAUH,QAAQ,SAASI,IAAK/C,EAAWD,WAAaL,EAAUK,uB,GA9HlDiD,IAAMC,WCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.92269eb2.chunk.js","sourcesContent":["import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport imageCompression from 'browser-image-compression';\nimport {Form , Container , Row , Col , Card , Alert , Badge} from 'react-bootstrap'; \n\nexport default class App extends React.Component {\n  constructor (...args) {\n    super(...args)\n    this.compressImage = this.compressImage.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 2024,\n      webWorker: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null\n      },\n      mainThread: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null\n      }\n    }\n  }\n\n  handleChange (target) {\n    return (e) => {\n      this.setState({ [target]: e.currentTarget.value })\n    }\n  }\n\n  onProgress (p, useWebWorker) {\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread'\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        progress: p\n      }\n    }))\n  }\n\n  async compressImage (event, useWebWorker) {\n    const file = event.target.files[0]\n    console.log('input', file)\n    console.log(\n      'ExifOrientation',\n      await imageCompression.getExifOrientation(file)\n    )\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread'\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        inputSize: (file.size / 1024 / 1024).toFixed(2),\n        inputUrl: URL.createObjectURL(file)\n      }\n    }))\n    var options = {\n      maxSizeMB: this.state.maxSizeMB,\n      maxWidthOrHeight: this.state.maxWidthOrHeight,\n      useWebWorker,\n      onProgress: p => this.onProgress(p, useWebWorker)\n    }\n    const output = await imageCompression(file, options)\n    console.log('output', output)\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        outputSize: (output.size / 1024 / 1024).toFixed(2),\n        outputUrl: URL.createObjectURL(output)\n      }\n    }))\n  }\n\n  render () {\n    const { webWorker, mainThread, maxSizeMB, maxWidthOrHeight } = this.state\n    return (\n      <Container>\n        <Row>\n        <Col md={{ span: 6, offset: 3 }}>\n\n        <div>\n        \n \n          <label htmlFor=\"web-worker\">\n\n          <p className='text-center'><h1 className='mt-4'>Image File Compressor</h1>  </p>\n            {webWorker.progress && <span>{webWorker.progress} %</span>}\n            \n            <Form id=\"web-worker\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={e => this.compressImage(e, true)}>\n            <Form.Group> <Form.File id=\"exampleFormControlFile1\" label=\"Example file input\" />\n              </Form.Group>\n              \n              </Form>\n          \n          </label>\n          <p>\n            {webWorker.inputSize && (\n              <span> <b>Source image size:</b> <Badge variant=\"primary\">{''}{webWorker.inputSize} mb </Badge></span>\n            )}\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            {webWorker.outputSize && (\n              <span><b> Output image size: </b> <Badge variant=\"primary\">{webWorker.outputSize} mb</Badge> </span>\n            )}\n          </p>\n        </div>\n       \n        {(mainThread.inputUrl || webWorker.inputUrl) && (\n          <table>\n            <thead>\n            <tr>\n              <td>  <Alert  variant= 'primary'>input preview </Alert></td>\n              <td><Alert  variant= 'danger'>output preview </Alert></td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n            <td> <Card.Img variant=\"bottom\" src={mainThread.inputUrl || webWorker.inputUrl} /></td>\n            <td> <Card.Img variant=\"bottom\" src={mainThread.outputUrl || webWorker.outputUrl}/></td>\n          \n             \n            </tr>\n            </tbody>\n          </table>\n        )}\n        </Col>\n\n      </Row>\n\n  </Container>\n    )\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}